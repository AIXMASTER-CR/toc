#dfa code 
def dfa_acceptance(input_string, char1, char2):
    if len(input_string) >= 2 and input_string[2] == char1 and input_string[1] == char2:
        return True
    return False
n1 = input("Enter the second  character: ")
n2 = input("Enter the  character: ")
user_input = input("Enter the string: ")
if dfa_acceptance(user_input, n1, n2):
    print("String is accepted by the DFA.")
else:
    print("String is not accepted by the DFA.")

def dfa_acceptance(input_string, char1, char2):
    if len(input_string) >= 4:
        middle_index = len(input_string) // 2
        if input_string[middle_index - 1] == char1 and input_string[middle_index] == char2:
            return True
    return False
n1 = input("Enter the first middle character: ")
n2 = input("Enter the second middle character: ")
user_input = input("Enter the string: ")
if dfa_acceptance(user_input, n1, n2):
    print("String is accepted by the DFA.")
else:
    print("String is not accepted by the DFA.")


C = 'A'
n = int(input("\nEnter the size of the string\n"))
a = []
if n == 0:
    print("A\tB\tD")
else:
    print("Enter the string (0 or 1, separated by spaces):")
    input_string = input()
    a = [int(x) for x in input_string.split()]
    a.append(-1)
    i = 0
    print("The states traveled are:")
    while a[i] == 0 and i < n:
        c = 'A'
        print(c, end="\t")
        i += 1
    while a[i] == 1 and a[i + 1] == 0 and i < n:
        c = 'B'
        print(c, end="\t")
        print("C", end="\t")
        i += 2
    while a[i] == 1 and i < n:
        c = 'D'
        print(c, end="\t")
        i += 1
    if c in ('A', 'B'):
        c = 'D'
    if c == 'D' and i == n:
        print("\nThe Entered string is valid")
    else:
        print("\nThe Entered string is not valid")

mealy
n = int(input("Enter the number of elements of the string: "))
ar = input("Enter the string: ")
state = "q0"
p = 0

print("States\tOutput")

i = 0  # Initialize i here, and no need to declare it before the loop

while i < n:  # Change to a while loop

    if state == "q0":
        if ar[i] == 'a':
            state = "q1"
            print(state, end="\t\t")
        else:
            state = "q0"
            print(state, end="\t\t")
            print(0)

        i += 1  # Move to the next character

    elif state == "q1":
        if ar[i] == 'b':
            state = "q2"
            print(state, end="\t\t")
        else:
            state = "q1"
            print(state, end="\t\t")
            print(0)

        i += 1  # Move to the next character

    elif state == "q2":
        if ar[i] == 'a':
            state = "q3"
            p += 1
            print(state, end="\t\t")
            print(1)
        else:
            state = "q0"
            print(state, end="\t\t")
            print(0)

        i += 1  # Move to the next character

    elif state == "q3":
        if ar[i] == 'a':
            state = "q1"
            print(state, end="\t\t")
        else:
            state = "q2"
            print(state, end="\t\t")
            print(0)

        i += 1  # Move to the next character

print("Number of occurrences of the string 'aba' is:", p)

mooore
def moore_machine(input_string):
    state = "q0"
    count = 0
    n = len(input_string)
    print("q0 0")
    for i in range(n):
        if input_string[i] == 'a' and state == "q0":
            state = "q1"
            op = 0
            print(f"q1 {op}")
        elif input_string[i] == 'b' and state == "q0":
            state = "q0"
            op = 0
            print(f"q0 {op}")
        elif input_string[i] == 'b' and state == "q1":
            state = "q2"
            op = 0
            print(f"q2 {op}")
        elif input_string[i] == 'a' and state == "q1":
            state = "q1"
            op = 0
            print(f"q1 {op}")
        elif input_string[i] == 'a' and state == "q2":
            state = "q3"
            op = 1
            print(f"q3 {op}")
            count += 1
        elif input_string[i] == 'b' and state == "q2":
            state = "q0"
            op = 0
            print(f"q0 {op}")
    return count
input_str = "ababbaaaabbaabb"
moore_count = moore_machine(input_str)
print(f"Number of occurrences using Moore machine: {moore_count}")

cfg ot cnf

from itertools import permutations
import string
def remove_char(string, pos):
    new_string = "".join([string[i] for i in range(len(string)) if str(i) not in pos])
    return new_string
def main():
    NT_symbol = input("Enter the NonTerminal Symbols: ").split()
    T_symbol = input("Enter the Terminal Symbols: ").split()
    main = {}
    n = []
    for i in NT_symbol:
        main[i] = input(f"{i} -> ").split("/")
        for k in main[i]:
            if '^' in k:
                n.append(i)
    n = set(n)
    for i in main:
        for k in main[i]:
            pos = ""
            m = []
            possible_comb = []
            for u in range(len(k)):
                if k[u] in n:
                    pos += str(u)
            for b in range(len(pos)):
                temp = [''.join(p) for p in permutations(pos, b + 1)]
                possible_comb += temp
            for b in possible_comb:
                if k != "^":
                    m.append(remove_char(k, b))
            main[i] = main[i] + list(set(m))
            main[i] = [production.replace('^', '') for production in main[i]]
    unit_prod = {}
    for i in NT_symbol:
        unit_prod[i] = []
    for i in main:
        for b in main[i]:
            if b in NT_symbol:
                unit_prod[i].append(b)
    for i in unit_prod:
        for j in unit_prod[i]:
            for k in main[i]:
                if k == j:
                    main[i].remove(k)
    for i in unit_prod:
        for mt in unit_prod[i]:
            for k in main[mt]:
                main[i].append(k)
    print("\nAFTER REMOVING NULL AND UNIT PRODUCTION")
    for i in main:
        print(i + " -> ", end="")
        for ele in range(len(main[i])):
            if main[i][ele] != "":
                b = main[i][ele]
                print(b, end="/")
        print()
    print("\nConverting to CNF form: ")
    letter = len(string.ascii_uppercase)
    for sym in NT_symbol:
        for i in range(len(main[sym])):
            b = main[sym][i]
            count_NT = sum(1 for j in b if j.isupper())
            count_T = sum(1 for j in b if j.islower())
            if count_NT == 3:
                New_NT = string.ascii_uppercase[letter - 1]
                letter -= 1
                NT_symbol.append(New_NT)
                main[New_NT] = [b[0:2]]
                main[sym][i] = New_NT + b[2:]
            elif count_T == 1 and count_NT == 2:
                New_NT = string.ascii_uppercase[letter - 1]
                letter -= 1
                NT_symbol.append(New_NT)
                main[New_NT] = [b[0]]
                New_NT2 = string.ascii_uppercase[letter - 1]
                letter -= 1
                NT_symbol.append(New_NT2)
                main[New_NT2] = [b[1:]]
                main[sym][i] = New_NT + New_NT2
    for i in main:
        print(i + " -> ", end="")
        unique_productions = set()
        for ele in range(len(main[i])):
            if main[i][ele] != "":
                b = main[i][ele]
                if b not in unique_productions:
                    print(b, end="/")
                    unique_productions.add(b)
        print()
if __name__ == "__main__":
    main()



cfg to pda

class Pair:
    def __init__(self, left, right):
        self.left = left
        self.right = right
def get_symbols(production, non_terminals, terminals):
    for ch in production:
        if ch.isupper():
            non_terminals.add(ch)
        elif ch.isalnum():
            terminals.add(ch)
def main():
    n = int(input("Enter number of production rules: "))
    rules = []
    print("Enter production rules:")
    for _ in range(n):
        left = input()
        right = input()
        rules.append(Pair(left, right))
    non_terminals = set()
    terminals = set()
    for rule in rules:
        production = rule.right
        if "|" in production:
            for prod in production.split("|"):
                get_symbols(prod, non_terminals, terminals)
        else:
            get_symbols(production, non_terminals, terminals)
        if production == "#":
            terminals.add("#")
    print("PDA Production Rules:")
    print("dl(q0, Null, S) --> dl(q1, Null, S)")
    for non_term in non_terminals:
        print(f"dl(q1, Null, {non_term}) --> ", end="")
        first = True
        for rule in rules:
            if rule.left == non_term:
                production = rule.right
                if "|" in production:
                    for prod in production.split("|"):
                        if not first:
                            print(" | ", end="")
                        print(f"dl(q1, {prod})", end="")
                        first = False
                else:
                    if not first:
                        print(" | ", end="")
                    print(f"dl(q1, {production})", end="")
                    first = False
        print()
    for term in terminals:
        if term == "#":
            print("dl(q1, Null, Null) --> dl(q1, Null)")
        else:
            print(f"dl(q1, {term}, {term}) --> dl(q1, Null)")
    print("dl(q1, Null, Null) --> dl(q2, Null, Null)")
if __name__ == "__main__":
    main()


TM
n = int(input("\nEnter Size of the String: "))
print("\nEnter String in terms of 0s and 1s: ", end="")
a = ['△'] + list(input()[:n]) + ['△']
x, r, f = 0, 0, 1
s = 'A'
i = 0
print("\nTransitions for Turing Machines:")
print(f"{s} : {a}")
while f == 1:
    if a[i] == '△':
        i += 1
        if a[i] == '△':
            x = 1
            f = 0
    if a[i] == '0':
        s = 'C'
        a[i] = '△'
        print(f"{s} : {a}")
        i += 1
        while a[i] == '0' or a[i] == '1':
            i += 1
        if a[i] == '△':
            i -= 1
            s = 'D'
        if a[i] == '1':
            r = 1
            f = 0
        elif a[i] == '△':
            x = 1
            f = 0
        elif a[i] == '0':
            a[i] = '△'
            i -= 1
            s = 'E'
            print(f"{s} : {a}")
            while a[i] == '0' or a[i] == '1':
                i -= 1
    elif a[i] == '1':
        s = 'G'
        a[i] = '△'
        print(f"{s} : {a}")
        i += 1
        while a[i] == '0' or a[i] == '1':
            i += 1
        if a[i] == '△':
            i -= 1
            s = 'F'
        if a[i] == '0':
            r = 1
            f = 0
        elif a[i] == '△':
            x = 1
            f = 0
        elif a[i] == '1':
            a[i] = '△'
            i -= 1
            s = 'E'
            print(f"{s} : {a}")
            while a[i] == '0' or a[i] == '1':
                i -= 1
if r == 1:
    print(f"{s} : {a}")
    print("String is not a PALINDROME")
elif r == 0 and x == 1:
    s = chr(ord(s) + 1)
    print("\nString is a PALINDROME")


reverse string

def binary_string_reversal(input_string):
    tape = list(input_string)
    head_position = 0
    while head_position < len(tape) // 2:
        tape[head_position], tape[len(tape) - 1 - head_position] = tape[len(tape) - 1 - head_position], tape[head_position]
        head_position += 1
    reversed_string = ''.join(tape)
    return reversed_string
input_binary_string = input("Enter a binary string: ")
result = binary_string_reversal(input_binary_string)
print(f"Original Binary String: {input_binary_string}")
print(f"Reversed Binary String: {result}")






































adjacncy matrix

v = int(input("Enter the number of vertices: "))
e = int(input("Enter the number of edges: "))
amatrix = [[0 for _ in range(v)] for _ in range(v)]
print("Enter the edges in the format source destination:")
for _ in range(e):
    source, destination = map(int, input().split())
    amatrix[source][destination] = 1
    amatrix[destination][source] = 1
print("Adjacency Matrix:")
for i in range(v):
    for j in range(v):
        print(amatrix[i][j], end=" ")
    print()
for i in range(v):
    vertexDegree = sum(amatrix[i])
    print(f"Degree of vertex {i + 1}: {vertexDegree}")
adjacncy matrix methods
def create_adjacency_matrix(edges, max_node):
    adj_matrix = [[0] * max_node for _ in range(max_node)]
    for source, destination in edges:
        adj_matrix[source - 1][destination - 1] = 1
    return adj_matrix
def complement_adjacency_matrix(adj_matrix):
    complement_matrix = [[1 - x for x in row] for row in adj_matrix]
    return complement_matrix
def display_matrix(matrix):
    for row in matrix:
        print(" ".join(map(str, row)))
    graph = []
    while True:
        edge = input("Enter an edge (source destination): ")
        if edge.lower() == 'done':
            break
        source, destination = map(int, edge.split())
        graph.append((source, destination))
    return graph
print("Enter the edges for Graph 1:")
g1 = input_graph_data()
print("Enter the edges for Graph 2:")
g2 = input_graph_data()
max_node = max(max(max(g1), max(g2)))
adj_matrix1 = create_adjacency_matrix(g1, max_node)
adj_matrix2 = create_adjacency_matrix(g2, max_node)
complement_matrix1 = complement_adjacency_matrix(adj_matrix1)
complement_matrix2 = complement_adjacency_matrix(adj_matrix2)
union_matrix = [[max(adj_matrix1[i][j], adj_matrix2[i][j]) for j in range(max_node)] for i in range(max_node)]
intersection_matrix = [[min(adj_matrix1[i][j], adj_matrix2[i][j]) for j in range(max_node)] for i in range(max_node)]
difference_matrix = [[max(0, adj_matrix1[i][j] - adj_matrix2[i][j]) for j in range(max_node)] for i in range(max_node)]
print("\nAdjacency Matrix for Graph 1:")
display_matrix(adj_matrix1)
print("\nAdjacency Matrix for Graph 2:")
display_matrix(adj_matrix2)
print("\nComplement of Adjacency Matrix for Graph 1:")
display_matrix(complement_matrix1)
print("\nComplement of Adjacency Matrix for Graph 2:")
display_matrix(complement_matrix2)
print("\nUnion of the Adjacency Matrices:")
display_matrix(union_matrix)
print("\nIntersection of the Adjacency Matrices:")
display_matrix(intersection_matrix)
print("\nDifference between the Adjacency Matrices (Graph 1 - Graph 2):")
display_matrix(difference_matrix)


havel hakimi

def havel_hakimi_algorithm(degrees):
    degrees.sort(reverse=True)
    while degrees and degrees[0] == 0:
        degrees.pop(0)
    if len(degrees) == 0:
        return True
    if degrees[0] >= len(degrees):
        return False
    for i in range(1, degrees[0] + 1):
        degrees[i] -= 1
    return havel_hakimi_algorithm(degrees[1:])
degrees = [int(x) for x in input("Enter a list of degrees separated by spaces: ").split()]
if havel_hakimi_algorithm(degrees):
    print("The input degrees represent a valid graph.")
else:
    print("The input degrees do not represent a valid graph.")

dijkstra

def dijkstra(graph, start):
    distance = {vertex: float('inf') for vertex in graph}
    distance[start] = 0
    unvisited = list(graph.keys())    
    while unvisited:
        current_vertex = min(unvisited, key=lambda vertex: distance[vertex])        
        for neighbor, weight in graph[current_vertex].items():
            calculated_distance = distance[current_vertex] + weight
            if calculated_distance < distance[neighbor]:
                distance[neighbor] = calculated_distance        
        unvisited.remove(current_vertex)    
    return distance
v = int(input("Enter the number of vertices in the graph: "))
g1 = {str(i): {} for i in range(1, v + 1)}
for i in range(v):
    for j in range(i + 1, v):
        weight = int(input(f"Enter weight between vertex {i + 1} and vertex {j + 1}: "))
        if weight != 0:
            g1[str(i + 1)][str(j + 1)] = weight
            g1[str(j + 1)][str(i + 1)] = weight
st = input("Enter the starting node: ")
shortest_distances = dijkstra(g1, st)
for i, dist in shortest_distances.items():
    if dist == float('inf'):
        print(f"There is no path from {st} to {i}.")
    else:
        print(f"Shortest distance from {st} to {i} is {dist}")

prims
def prim(graph):
    start_vertex = list(graph.keys())[0]
    min_spanning_tree = []
    visited = set([start_vertex])
    while len(visited) < len(graph):
        min_edge = (float('inf'), None, None)
        for vertex in visited:
            for neighbor, weight in graph[vertex].items():
                if neighbor not in visited and weight < min_edge[0]:
                    min_edge = (weight, vertex, neighbor)
        if min_edge[1] is not None and min_edge[2] is not None:
            weight, vertex, neighbor = min_edge
            min_spanning_tree.append((vertex, neighbor, weight))
            visited.add(neighbor)
    return min_spanning_tree
v = int(input("Enter the number of vertices in the graph: "))
g1 = {str(i): {} for i in range(1, v + 1)}
for i in range(v):
    for j in range(i + 1, v):
        weight = int(input(f"Enter weight between vertex {i + 1} and vertex {j + 1}  "))
        if weight != 0:
            g1[str(i + 1)][str(j + 1)] = weight
            g1[str(j + 1)][str(i + 1)] = weight
for i in range(1, v + 1):
    for j in range(i + 1, v + 1):
        if not g1[str(i)].get(str(j)):
            g1[str(i)][str(j)] = float('inf')
            g1[str(j)][str(i)] = float('inf')
minimum_spanning_tree = prim(g1)
print("Minimum Spanning Tree:")
for vertex, neighbor, weight in minimum_spanning_tree:
    if weight == float('inf'):
        print(f"No edge between {vertex} and {neighbor}")
    else:
        print(f"Edge: {vertex} - {neighbor}, Weight: {weight}")

kruskal
class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.edges = []
    def add_edge(self, u, v, w):
        self.edges.append((u - 1, v - 1, w))
    def kruskal(self):
        self.edges = sorted(self.edges, key=lambda item: item[2])
        parent = [i for i in range(self.vertices)]
        result = []
        index = 0
        while len(result) < self.vertices - 1:
            u, v, w = self.edges[index]
            index += 1
            x = self.find(parent, u)
            y = self.find(parent, v)
            if x != y:
                result.append((u, v, w))
                self.union(parent, x, y)
        return result
    def find(self, parent, i):
        if parent[i] == i:
            return i
        return self.find(parent, parent[i])
    def union(self, parent, x, y):
        parent[x] = y
def main():
    vertices = int(input("Enter the number of vertices in the graph: "))
    graph = Graph(vertices)
    for i in range(1, vertices + 1):
        for j in range(i + 1, vertices + 1):
            weight = int(input(f"Enter weight between vertex {i} and vertex {j}: "))
            if weight != 0:
                graph.add_edge(i, j, weight)
    minimum_spanning_tree = graph.kruskal()
    print("\nMinimum Spanning Tree:")
    for u, v, w in minimum_spanning_tree:
        print(f"Edge: {u + 1} - {v + 1}, Weight: {w}")
if __name__ == "__main__":    main()


bsf 
from collections import defaultdict, deque
def bfs(graph, start):
    visited = set()
    queue = deque([start])
    while queue:
        vertex = queue.popleft()
        if vertex not in visited:
            print(vertex, end=' ')
            visited.add(vertex)
            queue.extend(neighbor for neighbor in graph[vertex] if neighbor not in visited)
edges = []
while True:
    edge = input("Enter an edge: ")
    if edge.lower() == 'done':
        break
    edges.append(tuple(edge.split()))
graph = defaultdict(list)
for edge in edges:
    u, v = edge
    graph[u].append(v)
    graph[v].append(u)
start_node = input("Enter the starting node: ")
print("BFS traversal starting from '{}':".format(start_node))
bfs(graph, start_node)

dfs
def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    if start not in visited:
        print(start, end=' ')
        visited.add(start)
        for neighbor in graph[start]:
            dfs(graph, neighbor, visited)
edges = []
while True:
    edge = input("Enter an edge : ")
    if edge.lower() == 'done':
        break
    edges.append(tuple(edge.split()))
graph = {}
for edge in edges:
    u, v = edge
    if u not in graph:
        graph[u] = []
    if v not in graph:
        graph[v] = []
    graph[u].append(v)
    graph[v].append(u)
start_node = input("Enter the starting node: ")
print("DFS traversal starting from '{}':".format(start_node))
dfs(graph, start_node)

color
class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.graph = {}
        self.colors = {}
    def add_edge(self, u, v):
        if u not in self.graph:
            self.graph[u] = []
        if v not in self.graph:
            self.graph[v] = []
        self.graph[u].append(v)
        self.graph[v].append(u)
    def is_safe(self, vertex, color, c):
        for neighbor in self.graph[vertex]:
            if neighbor in self.colors and self.colors[neighbor] == c:
                return False
        return True
    def greedy_coloring(self):
        for vertex in self.graph:
            for c in range(self.vertices):
                if self.is_safe(vertex, self.colors, c):
                    self.colors[vertex] = c
                    break
    def print_colors(self):
        for vertex in self.graph:
            print(f"Vertex {vertex} has color {self.colors[vertex]}")
if __name__ == "__main__":
    num_vertices = int(input("Enter the number of vertices: "))
    num_edges = int(input("Enter the number of edges: "))
    g = Graph(num_vertices)
    for _ in range(num_edges):
        u, v = map(int, input("Enter an edge (u v): ").split())
        g.add_edge(u, v)
    g.greedy_coloring()
    g.print_colors()

travelling sale
import itertools
def traveling_salesman(nodes, edges):
    node_permutations = list(itertools.permutations(nodes))
    min_distance = float('inf')
    optimal_path = []
    for path in node_permutations:
        distance = 0
        for i in range(len(path) - 1):
            current_edge = (path[i], path[i + 1])
            distance += edges[current_edge]
        if distance < min_distance:
            min_distance = distance
            optimal_path = path + (path[0],) 
    return optimal_path, min_distance
num_nodes = int(input("Enter the number of nodes: "))
edges = {}
for i in range(num_nodes):
    for j in range(i + 1, num_nodes):
        weight = int(input(f"Enter the weight for edge ({i}, {j}): "))
        edges[(i, j)] = weight
        edges[(j, i)] = weight 
nodes = tuple(range(num_nodes))
optimal_path, min_distance = traveling_salesman(nodes, edges)
print(f"Optimal Path: {optimal_path}")
print(f"Minimum Distance: {min_distance}")













